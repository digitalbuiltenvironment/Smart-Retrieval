# Google Search Console HTML Tag Verification
# Select URL prefix property type and copy the string of characters from the HTML tag section
GSC_TAG_VERIFICATION=string-of-characters-from-Google-Search-Console

# AUTH URL (set to canonical URL of your app in production e.g. https://www.example.com)
NEXTAUTH_URL=http://localhost:3000

# Generate a random secret: https://generate-secret.vercel.app/32 or `openssl rand -base64 32`
NEXTAUTH_SECRET=super-random-secret

# Create a Google OAuth app here: https://developers.google.com/identity/gsi/web/guides/get-google-api-clientid
# Authorization callback URL: https://authjs.dev/reference/core/providers_github#callback-url
GOOGLE_CLIENT_ID=something.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=google-client-secret

# Support OAuth login on preview deployments, see: https://authjs.dev/guides/basics/deployment#securing-a-preview-deployment
# Set the following only when deployed. In this example, we can reuse the same OAuth app, but if you are storing users, we recommend using a different OAuth app for development/production so that you don't mix your test and production user base.
# AUTH_REDIRECT_PROXY_URL=https://YOURAPP.vercel.app/api/auth

# SGID Authentication 
# Create a new SGID App at: https://developer.id.gov.sg/
# API Documentation: https://docs.id.gov.sg/introduction/overview
SGID_CLIENT_ID=sgid-client-id
SGID_CLIENT_SECRET=sgid-client-secret
# Private key is needed for retrieving & decrypting the user info from SGID
# SGID_PRIVATE_KEY=sgid-private-key

# Chat API Endpoint (where the backend is running)
# (set to canonical URL of your app in production e.g. https://www.example.com)
NEXT_PUBLIC_CHAT_API=http://127.0.0.1:8000/api/chat
# Query API Endpoint (where the backend is running)
# (set to canonical URL of your app in production e.g. https://www.example.com)
NEXT_PUBLIC_QUERY_API=http://127.0.0.1:8000/api/query
# Search API Endpoint (where the backend is running)
# (set to canonical URL of your app in production e.g. https://www.example.com)
NEXT_PUBLIC_SEARCH_API=http://127.0.0.1:8000/api/search
# Healthcheck API Endpoint (where the backend is running)
# (set to canonical URL of your app in production e.g. https://www.example.com)
NEXT_PUBLIC_HEALTHCHECK_API=http://127.0.0.1:8000/api/healthcheck

# Backend API Authorization Key
# Ensure this matches the value in the backend .env
# https://generate-random.org/api-key-generator?count=1&length=128&type=mixed-numbers&prefix=sr-
BACKEND_API_KEY=sr-random-api-key

# Supabase Settings
NEXT_PUBLIC_SUPABASE_URL=https://YourSupabaseProjectID.supabase.co
SUPABASE_SERVICE_ROLE_KEY=YourSupabaseserviceRoleSecret
SUPABASE_JWT_SECRET=YourSupabaseJWTSecret